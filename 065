from selenium import webdriver

import pandas as pd

import time

import os

from selenium.common.exceptions import NoSuchElementException

pd.options.mode.chained_assignment = None

from selenium.webdriver.common.by import By

from selenium.webdriver.support.ui import WebDriverWait

from selenium.webdriver.support import expected_conditions as ec

import shutil

from time import strftime

from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from selenium.webdriver.common.keys import Keys

import ctypes

 

# cronometrar tempo da execução

start = time.time()

 

# abre o excel

x1 = pd.ExcelFile(r'<path>\pythonProject\ComeCotas - Elis\Consulta.xlsx')

 

# lê os dados e armazena em dataFrame

df = x1.parse("BASE")

 

 

# cabeçalho para rodar

chrome_options = webdriver.ChromeOptions()

flags_i_want = ['cookies-without-same-site-must-be-secure@2', 'same-site-by-default-cookies@2']

chromeLocalStatePrefs = {'browser.enabled_labs_experiments': flags_i_want}

chrome_options.add_experimental_option('localState', chromeLocalStatePrefs)

 

 

#todo teste nao abrir janela de download

#prefs = {'browser.download.panel.shown': False}

 

#options = Options()

# chrome_options.add_experimental_option("prefs", {

#   "download.default_directory": r"
\Users\lusilbi\Downloads\ComeCotas_Automação_BaixarArquivos",

#   "download.panel.show" : False,

#   "download.directory_upgrade": True,

#   "download.prompt_for_download": False,

#   "safebrowsing.enabled": True

# })

 

# tentativa 2

#chrome_options.gpu = False

#chrome_options.headless = True

# chrome_options.add_experimental_option("prefs", {

#     "download.default_directory" : "/data/books/chrome/",

#     'profile.default_content_setting_values.automatic_downloads': 2,

#     })

#

# desired = chrome_options.to_capabilities()

# desired['loggingPrefs'] = { 'performance': 'ALL'}

#driver = webdriver.Chrome(desired_capabilities=desired)

 

# tentativa 3

prefs = {'profile.default_content_setting_values.automatic_downloads': 1}

chrome_options.add_experimental_option("prefs", prefs)

 

 

 

# caminho do chromedrive, site e label=nome do site na aba

browser = webdriver.Chrome(executable_path=r'<path>chromedriver.exe', options=chrome_options)

browser.get('http://172.16.18.147/Passivo/login.do')

assert 'Serviços para o Mercado de Capitais BRT'.strip() in browser.title.strip()

 

# Logar - Usuario e senha - SUBSTITUIR PELO # esperar usuario logar

browser.find_element_by_xpath("/html/body/div[2]/div/div[2]/div/form/table/tbody/tr[1]/td[2]/input").send_keys("Itauf.004289120")  #usuario Elis

browser.find_element_by_xpath("/html/body/div[2]/div/div[2]/div/form/table/tbody/tr[2]/td[2]/input").send_keys("412412")  #senha Elis

browser.find_element_by_xpath("/html/body/div[2]/div/div[2]/div/form/table/tbody/tr[2]/td[3]/a[1]/img").click()

 

# Ir para Baixar Arquivos

#browser.get(<path>)

browser.get(<path>)

 

for row, dfr in df.iterrows():

    global gestor1

    gestor = int(dfr['CD_GESTOR'])

    gestor1 = str(gestor)

    print(gestor1[2:])

 

 

    # Colocar o Gestor

    browser.find_element_by_xpath("/html/body/form[2]/div/div/table/tbody/tr[2]/td[2]/input").send_keys(gestor1[2:])

 

 

    # Colocar data dia 31/05/2021

    browser.find_element_by_xpath("/html/body/form[2]/div/div/table/tbody/tr[6]/td[2]/input").clear()

    browser.find_element_by_xpath("/html/body/form[2]/div/div/table/tbody/tr[6]/td[2]/input").send_keys("02/12/2021")

 

   # Colocar para excel ou txt

    browser.find_element_by_xpath("/html/body/form[2]/div/div/table/tbody/tr[4]/td[2]/select").send_keys("DBF")

 

    # Nao precisa colocar data, pq ele sempre roda com a data do dia atual, quando rodar no dia 31, já vai entrar automatico.

 

    #break

 

    # Clicar em Continuar

    browser.find_element_by_xpath("//*[@src='img/pt/continuar.gif']").click()

 

    def arquivos_065_096():

        # Arquivos

        # Colocar no 065

        browser.find_element_by_xpath("//*[@value='065']").click()

        # Colocar no 096

        browser.find_element_by_xpath("//*[@value='096']").click()

    #arquivos_065_096()

 

    def arquivos_035():

        # Arquivos

        # Colocar no 035

        browser.find_element_by_xpath("//*[@value='035']").click()

    arquivos_035()

 

    def demorados():

        # Arquivos teste demora

        # Colocar no 091

        browser.find_element_by_xpath("/html/body/form[2]/div/div/table[2]/tbody/tr[35]/td[2]/input").click()

        # Colocar no 088

        browser.find_element_by_xpath("/html/body/form[2]/div/div/table[2]/tbody/tr[34]/td[2]/input").click()

        # Colocar no 086

        browser.find_element_by_xpath("/html/body/form[2]/div/div/table[2]/tbody/tr[33]/td[2]/input").click()

        # Colocar no 084

        browser.find_element_by_xpath("/html/body/form[2]/div/div/table[2]/tbody/tr[32]/td[2]/input").click()

        # Colocar no 082

        browser.find_element_by_xpath("/html/body/form[2]/div/div/table[2]/tbody/tr[31]/td[2]/input").click()

    #demorados()

 

 

    # Clicar em Enviar

    browser.execute_script(r'javascript: fn_enviar();')

 

    # Clicar em Continuar

    try:

        wait = WebDriverWait(browser, 9000000)

        element = wait.until(ec.visibility_of_all_elements_located((By.XPATH, "//*[@id='imgContinuar']")))

        print("apareceu")

        browser.find_element_by_xpath("//*[@id='imgContinuar']").click()

    except NoSuchElementException:

        print("Err")

 

    # Selecionar todos

    browser.find_element_by_xpath("/html/body/form[2]/div/div/span[2]/input").click()

 

    # Baixar

    print("\n")

    print(browser.window_handles)

    browser.find_element_by_xpath("//*[@id='imgEnviar']").click()

    time.sleep(6)

 

 

    user32 = ctypes.windll.user32

    #todo, usar a user32, para identificar a janela, e depois mandar o windows message

 

    user32.keybd_event(0x09, 0, 0, 0)

    time.sleep(1)

    user32.keybd_event(0x09, 0, 0, 0)

    time.sleep(1)

    user32.keybd_event(0x09, 0, 0, 0)

    #time.sleep(1)

    user32.keybd_event(0x0D, 0, 0, 0)

    #browser.switch_to.window(browser.window_handles[-1])

    print("\n")

    print(browser.window_handles)

 

 

 

    #browser.find_element_by_xpath("//*[@id='imgEnviar']").send_keys(Keys.ENTER)

 

    "Renomear arquivo"

    #os.rename(r'<path>\Products.txt', r'<path>\Shipped Products.txt')

 

    while not os.path.exists(r'<path>\Arquivos_Download.zip'):

        time.sleep(1)

 

    if os.path.isfile(r'<path>\Arquivos_Download.zip'):

 

        # read file

        print("existeee")

        time.sleep(1)

        os.rename(r'<path>\Arquivos_Download.zip',

                  r'<path>\{}_{}.zip'.format(gestor1,  strftime("%H%M")))

    else:

        raise ValueError("%s isn't a file!" % r'<path>\Arquivos_Download.zip')

 

    original = r'<path>\{}_{}.zip'.format(gestor1,  strftime("%H%M"))

    target = r'<path>\ComeCotas_Automação_BaixarArquivos'

 

 

    shutil.move(original, target)

 

 

    #break

    browser.get(<path>)

 

 
